switzerland v0.0

e-mail switzerland-devel@eff.org
       https://falcon.eff.org/mailman/listinfo/switzerland-devel

IRC    #switzerland on irc.freenode.org

bugs   https://sourceforge.net/tracker/?func=browse&group_id=233013&atid=1088569

Contents:

1. Overview

1.1. What is switzerland?
1.1.1 How do I run switzerland?
1.2. Stability of this release
1.3. Security
1.3.1. Privleged client
1.4. Platforms supported
1.5. Privacy concerns

2. Testing Notes

2.1. NAT (Network Address Translation) firewalls
2.2. Other firewalls
2.3. Test server

3. Contributing

3.1. Ways to help
3.2. svn repository
3.3. Tree organization


1. Overview

1.1. What is switzerland?

Switzerland is client/server software to detect when ISPs, networks or
firewalls interfere with Internet traffic.  Switzerland clients summarize
incoming and outgoing packets to a trusted server, which verifies that pairs
of clients receive what each other sent.  If a third party injects, alters
or drops packets en route between clients, the switzerland server alerts the
clients and records data about the event for further analysis.

                     +-----------+
    +----------+     | Internet  |     +----------+
    | Alice    | --> | networks/ | --> | Bob      |
    | (client) | <-- | ISPs/     | <-- | (client) |
    +----------+     | firewalls |     +----------+
       |    ^        +-----------+        ^     |
       v    |                             |     v
    +---------------------------------------------+
    |  |    |_____________________________|     | |
    |  |                   |                    | |
    |  +---------------->  =  <-----------------+ |
    |      summary A               summary B      |
    |                                             |
    |           Switzerland (server)              |
    +---------------------------------------------+

1.1.1. How do I run Switzerland?

Before you run switzerland, be sure to read the sections on security, privacy
and firewalls below.  

Once you've read those sections and installed switzerland (see the INSTALL file
for instructions), you can run switzerland like this:

switzerland-client -s switzerland.eff.org

If you run your own switzerland server, you can specify that instead using the
-s flag.

1.2. Stability of this release

This is an alpha release; switzerland is not stable software.  It's been
gently tested but is still heavily under development.  Many planned features
have not been implemented.  We need your help!

1.3. Security

This release of switzerland may have bugs or security vulnerabilities that
allow an attacker to compromise your computer's security.  We recommend you
do not run it in a production setting, on computers that store sensitive
data or data that has not been backed up, or on computers exchanging
sensitive data over unencrypted connections.

1.3.1. Privleged client

Because the switzerland client passively observes all traffic on your
computer's network interface, it needs administrative (root) privleges, much
like the tcpdump program.

1.4. Platforms supported

We've tested the client and server on:
- Linux (x86/debian)
- Windows XP
- OpenBSD
- FreeBSD
- Darwin (tiger, with an upgrade to python2.5)

Please help us add support for your platform of choice.

1.5. Privacy concerns

In this release, a switzerland server publishes the IP addresses of all
connected clients.

Your client will only summarize traffic exchanged with other switzerland
clients, and won't tell the server anything about communications with
computers that are not switzerland clients.

Summary information uses cryptographic hashes of packets, so it's hard to
reconstruct the contents of your packets from what you send to switzerland.
However, when it detects forged packets, the switzerland server may ask your
computer for full copies of packets sent around the same time as the forgery
was received.  Therefore it is likely that running switzerland will result
in portions of your unencrpyted communications being logged at a server.

In this release, traffic between switzerland clients and the server is
unencrypted, so it's possible for an eavesdropper to see information about
what kind of connections you have open with which other switzerland clients,
and how frequently you're exchanging data.

Later releases will be more careful about privacy and add more options for
fine-grained privacy control.  For now though, treat any traffic travelling
between switzerland clients as "public record" information.

2. Testing Notes

2.1. NAT (Network Address Translation) firewalls

switzerland is aware of the changes to IP addresses and port numbers that
NAT firewalls normally make, and will not report those as modifications to
the underlying traffic.

But many NAT firewalls, especially home wireless routers, make other
undocumented modifications to the traffic travelling through them, beyond
the minimum required to be a NAT firewall.  As a result, swizterland clients
that are behind firewalls or talking to machines that are behind firewalls
will often detect and report these modifications to traffic.

It is important not to confuse packet modification by your firewall or
another client's firewall with interference by an ISP.  If you want to
preform reliable tests of an ISP, you'll need to plug your computer directly
into your DSL or cable modem, and only consider results obtained with
non-firewalled peers.  Switzerland will tell you which other clients are
behind NAT firewalls.

In the future we may be able to build a database of different models of
common NAT firewalls and the things they do, which would allow preliminary
tests to be done through the firewall.  At the moment, for instance, we
think that devices running the DD-WRT open firmware make no unexpected
modifications to traffic, so you should be able to run ISP tests through
them.  A firewall-free setup should always be used to confirm test results.

2.2 Other firewalls

It is theoretically possible that interference can be performed by non-NAT
firewalls.  These are most likely to be encountered on corporate and
university networks.  Switzerland will detect this as interference by an
intermediary.  It isn't a bug, it's a feature.  Remember, traffic
interference could be occuring at any step along the way from your computer
to another.

2.3 Test server

EFF runs a default server at switzerland.eff.org:7778 (we expect it'll crash
and misbehave a bit for early versions of the code), but you can run your
own servers elsewhere if you wish.

3. Contributing

3.1. Ways to help

- become a maintainer
- use the software and report bugs / results
- run or write new unit testcases
- add or fix support for your platform
- help find and fix security vulnerabilities
- implement new features

3.2. svn repository

switzerland's public ssh repository is available at
svn+ssh://switzerland.sf.net/

3.3. Tree organization

bin/                     : supporting binaries
switzerland/             : source code
  client/                : client code
    Alice.py             : main file for client
    AliceConfig.py       : command-line option/configuration file handling
    AliceFlow.py         : one direction of an IP communication
    AliceLink.py         : interaction with switzerland server
    Cleaner.py           : thread to remove stale queued packets
    FastCollector.c      : packet sniffer that writes to mmap'd buffer
    FlowManager.py       : thread to track active flows
    Packet.py            : an IP datagram
    PacketBatch.py       : group of IP datagrams
    PacketListener.py    : thread to listen for incoming packets
    PacketQueue.py       : a queue of batches in the same flow
    Reporter.py          : thread to report traffic to server
    TimeManager.py       : interface with NTP 
  common/                : code shared between client+server
    Flow.py              : one direction of an IP communication
    Messages.py          : switzerland protocol messages
    PcapLogger.py        : write datagrams to pcap files
    Protocol.py          : client/server socket communication
    local_ip.py          : detect IP address / network interfaces
    util.py              : miscellaneous
  lib/                   : third-party libraries
    tweaked_cerializer.py: modified version of python cerealizer
  server/                : server code
    Reconciliator.py     : test whether two views of a flow agree
    Switzerland.py       : main server file
    SwitzerlandConfig.py : command-line optin/configuration file handling
    SwitzerlandLink.py   : interaction with clients
  tests/                 : unit tests
switzerland-client*      : client
switzerland-server*      : server

